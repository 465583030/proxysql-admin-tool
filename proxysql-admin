#!/bin/bash
# This script will assist with configuring ProxySQL in combination with Cluster.
# Version 1.0
###############################################################################################


# Make sure only root can run this script
if [ $(id -u) -ne 0 ]; then
  echo "ERROR: This script must be run as root!" 1>&2
  exit 1
fi

#bash prompt internal configuration
BD=$(tput bold)
NBD=$(tput sgr0)

# Internal variables
if [ -e "/dummypathnonexisting/.mylogin.cnf" ]; then
  echo "ERROR! /dummypathnonexisting/.mylogin.cnf found. This should not happen. Terminating";
  exit 1
else
  export HOME="/dummypathnonexisting"
fi

# Dispay script usage details
usage () {
  echo "Usage: [ options ]"
  echo "Options:"
  echo "  --config-file                      Read login credentials form a configuration file (overrides any login credentials specified on the command line)"
  echo "  --test-run                         This option is used to setup dummy proxysql configuration"
  echo "  --proxysql-username=user_name      Username for connecting to the ProxySQL service"
  echo "  --proxysql-password[=password]     Password for connecting to the ProxySQL service"
  echo "  --proxysql-port=port_num           Port Nr. for connecting to the ProxySQL service"
  echo "  --proxysql-host=host_name          Hostname for connecting to the ProxySQL service"
  echo "  --cluster-username=user_name       Username for connecting to the Cluster node"
  echo "  --cluster-password[=password]      Password for connecting to the Cluster node"
  echo "  --cluster-port=port_num            Port Nr. for connecting to the Cluster node"
  echo "  --cluster-host=host_name           Hostname for connecting to the Cluster node"
  echo "  --cluster-app-username=user_name   Application username for connecting to the Cluster node"
  echo "  --cluster-app-password[=password]  Application password for connecting to the Cluster node"
  echo "  --monitor-username=user_name       Username for monitoring Cluster nodes through ProxySQL"
  echo "  --monitor-password[=password]      Password for monitoring Cluster nodes through ProxySQL"
  echo "  --enable, -e                       Auto-configure Cluster nodes into ProxySQL"
  echo "  --disable, -d                      Remove any Cluster configurations from ProxySQL"
  echo "  --node-check-interval              Interval for monitoring node checker script (in milliseconds)"
  echo "  --mode                             ProxySQL read/write configuration mode, currently supporting: 'loadbal' and 'singlewrite' (the default) modes"
  echo "  --write-node                       Writer node to accept write statments. This option is supported only when using --mode=singlewrite"
  echo "  --adduser                          Adds the Cluster application user to the ProxySQL database"
  echo "  --version, -v                      Print version info"
}

# Check if we have a functional getopt(1)
if ! getopt --test
  then
  go_out="$(getopt --options=edv --longoptions=config-file:,proxysql-username:,proxysql-password::,proxysql-host:,proxysql-port:,cluster-username:,cluster-password::,cluster-host:,cluster-port:,monitor-username:,monitor-password:,cluster-app-username:,cluster-app-password:,node-check-interval:,test-run,mode:,write-node:,enable,disable,adduser,version,help \
  --name="$(basename "$0")" -- "$@")"
  test $? -eq 0 || exit 1
  eval set -- $go_out
fi

if [[ $go_out == " --" ]];then
  usage
  exit 1
fi

if ! echo "$go_out" | grep -q 'config-file'; then
  # Reading default variables from default configuration file location.
  if [ -e "/etc/proxysql-admin.cnf" ]; then
    source /etc/proxysql-admin.cnf
  fi
fi

for arg
do
  case "$arg" in
    -- ) shift; break;;
    --config-file )
      config_file="$2"
      shift 2
      if [ -z "${config_file}" ]; then
        echo "ERROR: You have not given config file location. Terminating."
        exit 1
      fi
      if [ -e "${config_file}" ]; then
        source "${config_file}"
      else
        echo "ERROR: ${config_file} does not exist. Terminating."
        exit 1
      fi
    ;;
    --proxysql-username )
    PROXYSQL_USERNAME="$2"
    shift 2
    ;;
    --proxysql-password )
    case "$2" in
      "")
      read -r -s -p  "Enter ProxySQL password:" INPUT_PASS
      if [ -z "$INPUT_PASS" ]; then
        PROXYSQL_PASSWORD=""
	printf "\nContinuing without ProxySQL password...\n";
      else
        PROXYSQL_PASSWORD="$INPUT_PASS"
      fi
      printf "\n"
      ;;
      *)
      PROXYSQL_PASSWORD="$2"
      ;;
    esac
    shift 2
    ;;
    --proxysql-host )
    PROXYSQL_HOSTNAME="$2"
    shift 2
    ;;
    --proxysql-port )
    PROXYSQL_PORT="$2"
    shift 2
    ;;
    --cluster-username )
    CLUSTER_USERNAME="$2"
    shift 2
    ;;
    --cluster-password )
    case "$2" in
      "")
      read -r -s -p  "Enter Cluster password:" INPUT_PASS
      if [ -z "$INPUT_PASS" ]; then
        CLUSTER_PASSWORD=""
	printf "\nContinuing without Cluster password...\n";
      else
        CLUSTER_PASSWORD="$INPUT_PASS"
      fi
      printf "\n"
      ;;
      *)
      CLUSTER_PASSWORD="$2"
      ;;
    esac
    shift 2
    ;;
    --cluster-host )
    CLUSTER_HOSTNAME="$2"
    shift 2
    ;;
    --cluster-port )
    CLUSTER_PORT="$2"
    shift 2
    ;;
    --monitor-username )
    MONITOR_USERNAME="$2"
    shift 2
    ;;
    --monitor-password )
    MONITOR_PASSWORD="$2"
    shift 2
    ;;
    --cluster-app-username )
    CLUSTER_APP_USERNAME="$2"
    shift 2
    ;;
    --cluster-app-password )
    CLUSTER_APP_PASSWORD="$2"
    shift 2
    ;;
    -e | --enable )
    shift
    enable=1
    ;;
    --adduser )
    shift
    adduser=1
    ;;
    -d | --disable )
    shift
    disable=1
    ;;
    --galera-check-interval )
    GALERA_CHECK_INTERVAL="$2"
    shift 2
    ;;
    --mode )
    MODE="$2"
    shift 2
    if [ $MODE != "loadbal" -a $MODE != "singlewrite" ]; then
      echo "ERROR: Invalid --mode passed:"
      echo "  Please choose any of these modes loadbal|singlewrite"
      exit 1
    fi
    ;;
    --write-node )
    WRITE_NODE="$2"
    shift 2
    ;;
    --test-run )
    shift
    DUMMY_TEST="YES"
    ;;
    -v | --version )
      echo "proxysql-admin version v1.3.2a"
      exit 0
    ;;
    --help )
    usage
    exit 0
    ;;
  esac
done

if [ ! -z "$DUMMY_TEST" ]; then
  echo "WARNING! You have selected dummy test mode. You have to pass Cluster/ProxySQL root credentials through command line"
  read -p "Would you like to proceed with '--i-am-only-testing' [y/n] ? " check_param
  case $check_param in
    y|Y)
      echo "Setting up proxysql test configuration!"
    ;;
    n|N)
      echo "You have selected No. Terminating.."
      exit 1
    ;;
    *)
      echo "Please type [y/n]! Terminating.."
      exit 1
    ;;
  esac
fi

if [[ ! -e `which mysql 2> /dev/null` ]] ;then
  echo "mysql client is not found, please install the mysql client package" 
  exit 1
fi

# Check the options gathered from the command line
if [ -z "$PROXYSQL_USERNAME" ];then
  if [ -z "$DUMMY_TEST" ]; then
    echo "The ProxySQL username is required!"
    usage
    exit 1
  else
    echo -n "Enter ProxySQL user name: "
    read -r PROXYSQL_USERNAME
    read -r -s -p  "Enter ProxySQL user password: " PROXYSQL_PASSWORD;echo ""

  fi
fi

if [[ -z "$PROXYSQL_HOSTNAME" ]]; then
  if [ -z "$DUMMY_TEST" ]; then
    PROXYSQL_HOSTNAME="127.0.0.1"
  else
    echo -n "Enter ProxySQL hostname: "
    read -r PROXYSQL_HOSTNAME
  fi
fi

if [[ -z "$PROXYSQL_PORT" ]]; then
  if [ -z "$DUMMY_TEST" ]; then
    PROXYSQL_PORT="6032"
  else
    echo -n "Enter ProxySQL port: "
    read -r PROXYSQL_PORT
  fi
fi

if [ -z "$CLUSTER_USERNAME" ];then
  if [ -z "$DUMMY_TEST" ]; then
    echo "The Cluster username is required!"
    usage
    exit 1
  else
    echo -n "Enter Cluster username (super user): "
    read -r CLUSTER_USERNAME
    read -r -s -p  "Enter Cluster user password: " CLUSTER_PASSWORD; echo "" 
  fi
fi

if [[ -z "$CLUSTER_HOSTNAME" ]]; then
  if [ -z "$DUMMY_TEST" ]; then
    CLUSTER_HOSTNAME="localhost"
  else
    echo -n "Enter Cluster hostname: "
    read -r CLUSTER_HOSTNAME
  fi
fi

if [[ -z "$CLUSTER_PORT" ]]; then
  if [ -z "$DUMMY_TEST" ]; then
    CLUSTER_PORT="localhost"
  else
    echo -n "Enter Cluster port: "
    read -r CLUSTER_PORT
  fi
fi

if [[ -z "$GALERA_CHECK_INTERVAL" ]]; then
  GALERA_CHECK_INTERVAL=3000
fi

if [[ -z "$MODE" ]]; then
  MODE="singlewrite"
else
  if [ $MODE != "loadbal" -a $MODE != "singlewrite" ]; then
    echo "ERROR: Invalid --mode passed:"
    echo "  Please choose any of these modes loadbal|singlewrite"
    exit 1
  fi
fi

if [ $MODE == "loadbal" ]; then
  WRITE_HOSTGROUP_ID=10
  READ_HOSTGROUP_ID=10
  sudo sed -i "0,/^[ \t]*export MODE[ \t]*=.*$/s|^[ \t]*export MODE[ \t]*=.*$|export MODE=\"loadbal\"|" /etc/proxysql-admin.cnf
elif [ $MODE == "singlewrite" ]; then
  WRITE_HOSTGROUP_ID=10
  READ_HOSTGROUP_ID=11
  sudo sed -i "0,/^[ \t]*export MODE[ \t]*=.*$/s|^[ \t]*export MODE[ \t]*=.*$|export MODE=\"singlewrite\"|" /etc/proxysql-admin.cnf
fi

PIDFILE=/tmp/cluster-proxysql-monitor.pid

proxysql_exec() {
  query=$1
  printf "[client]\nuser=${PROXYSQL_USERNAME}\npassword=${PROXYSQL_PASSWORD}\nhost=${PROXYSQL_HOSTNAME}\nport=${PROXYSQL_PORT}\n" | \
      mysql --defaults-file=/dev/stdin --protocol=tcp -e "${query}" 2>/dev/null
}

mysql_exec() {
  query=$1
  printf "[client]\nuser=${CLUSTER_USERNAME}\npassword=${CLUSTER_PASSWORD}\nhost=${CLUSTER_HOSTNAME}\nport=${CLUSTER_PORT}\n" | \
      mysql --defaults-file=/dev/stdin --protocol=tcp -Bse "${query}" 2>/dev/null
}

proxysql_connection_check(){
  CONNECTION_MSG=$( { printf "[client]\nuser=${PROXYSQL_USERNAME}\npassword=${PROXYSQL_PASSWORD}\nhost=${PROXYSQL_HOSTNAME}\nport=${PROXYSQL_PORT}\n" | mysql --defaults-file=/dev/stdin --protocol=tcp -e "show tables" >/dev/null; }  2>&1 )
  if [[ ! -z $CONNECTION_MSG ]]; then
    echo "$CONNECTION_MSG"
    echo "Please check ProxySQL connection parameters! Terminating.."
    exit 1
  fi
}

cluster_connection_check(){
  CONNECTION_MSG=$( { printf "[client]\nuser=${CLUSTER_USERNAME}\npassword=${CLUSTER_PASSWORD}\nhost=${CLUSTER_HOSTNAME}\nport=${CLUSTER_PORT}\n" | mysql --defaults-file=/dev/stdin --protocol=tcp -Bse "select @@port" >/dev/null; }  2>&1 )
  if [[ ! -z $CONNECTION_MSG ]]; then
    echo "$CONNECTION_MSG"
    echo "Please check Cluster connection parameters! Terminating.."
    exit 1
  fi
}

check_cmd(){
  MPID=$1
  ERROR_MSG=$2
  if [ ${MPID} -ne 0 ]; then echo -e "\nERROR: $ERROR_MSG. Terminating!"; exit 1; fi
}

check_proxysql(){
  if ! pidof proxysql >/dev/null ; then
    echo "ProxySQL is not running, please check the error log at /var/lib/proxysql/proxysql.log"
    exit 1
  fi
}

user_input_check(){
  USER_CATEGORY=$1
  USER_DESCRIPTION=$2
  HOSTGROUP_ID=$3
  USERNAME=`eval "echo \\$${USER_CATEGORY}_USERNAME"`
  PASSWORD=`eval "echo \\$${USER_CATEGORY}_PASSWORD"`
  if [[ -z $USERNAME ]]; then
    read -r -p "Enter ${USER_DESCRIPTION}name : " ${USER_CATEGORY}_USERNAME
      while [[ -z "${USER_CATEGORY}_USERNAME" ]]
      do
        echo -n "No input entered, Enter ${USER_DESCRIPTION}name: "
      read -r ${USER_CATEGORY}_USERNAME
    done
  else
    echo -e "${USER_DESCRIPTION}name as per command line/config-file is ${BD}`eval "echo \\$${USER_CATEGORY}_USERNAME"`${NBD}"
  fi
  if [[ -z $PASSWORD ]]; then
    read -r -s -p  "Enter ${USER_DESCRIPTION} password: " ${USER_CATEGORY}_PASSWORD
    while [[ -z "${USER_CATEGORY}_PASSWORD" ]]
    do
      read -r -s -p  "No input entered, Enter ${USER_DESCRIPTION} password: " ${USER_CATEGORY}_PASSWORD
    done
  fi
  USERNAME=`eval "echo \\$${USER_CATEGORY}_USERNAME"`
  PASSWORD=`eval "echo \\$${USER_CATEGORY}_PASSWORD"`
  if [ "$USER_CATEGORY" != "MONITOR" ]; then
    check_user=`mysql_exec "SELECT user,host FROM mysql.user where user='$USERNAME' and host='$USER_HOST_RANGE';"`
    if [[ -z "$check_user" ]]; then
      mysql_exec "CREATE USER $USERNAME@'$USER_HOST_RANGE' IDENTIFIED BY '$PASSWORD';"
      check_cmd $? "Cannot add Cluster application user : '$USERNAME'"
      if [ ! -z "$DUMMY_TEST" ]; then
        mysql_exec "GRANT ALL ON *.* to $USERNAME@'$USER_HOST_RANGE'"
        check_cmd $? "$CLUSTER_USERNAME@'$CLUSTER_HOSTNAME' does not have GRANT privilege to assign permission"
      fi

      proxysql_exec "INSERT INTO mysql_users (username,password,active,default_hostgroup) values ('$USERNAME','$PASSWORD',1,$HOSTGROUP_ID);LOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS FROM RUNTIME;SAVE MYSQL USERS TO DISK;"
      check_cmd $? "Cannot add Cluster application user : '$USERNAME' (mysql_users update)"
      echo -e "\n\nCluster application user '${BD}$USERNAME'@'$USER_HOST_RANGE${NBD}' has been added with USAGE privilege, please make sure to grant appropriate privileges\n"
    else
      check_user=`proxysql_exec "SELECT username FROM mysql_users where username='$USERNAME'"`
      if [[ -z "$check_user" ]]; then
        echo -e "\nApplication user '${BD}${USERNAME}'@'$USER_HOST_RANGE${NBD}' already present in Cluster.\n"
        proxysql_exec "INSERT INTO mysql_users (username,password,active,default_hostgroup) values ('$USERNAME','$PASSWORD',1,$HOSTGROUP_ID);LOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS FROM RUNTIME;SAVE MYSQL USERS TO DISK;"
        check_cmd $? "Cannot add Cluster application user : '$USERNAME' (mysql_users update)"
      else
        echo -e "\nApplication user '${BD}${USERNAME}'@'$USER_HOST_RANGE${NBD}' already present in Cluster and ProxySQL database.\n"
      fi
    fi
  fi
}

# Auto configure Cluster nodes into ProxySQL
enable_proxysql(){
  # Checking proxysql binary location
  if [[ ! -e $(which proxysql 2> /dev/null) ]]; then
    echo "The proxysql binary was not found, please install the ProxySQL package"  
    exit 1
  elif [[ ! -e $(which proxysql_galera_checker 2> /dev/null) ]] ;then
    echo "The proxysql_galera_checker binary was not found, please check ProxySQL package installation"  
    exit 1
  elif [[ ! -e $(which proxysql_node_monitor 2> /dev/null) ]]; then
    echo "The proxysql_node_monitor binary was not found, please check ProxySQL package installation"  
    exit 1
  else
    PROXYSQL=$(which proxysql)
    PROXYSQL_GALERA_CHECK=$(which proxysql_galera_checker)
    PROXYSQL_NODE_MONITOR=$(which proxysql_node_monitor)
  fi
  # Check for existing proxysql process
  if ! pidof proxysql >/dev/null ; then
    echo "ProxySQL is not running; please start proxysql service"
    exit 1
  fi
  proxysql_connection_check

  #modifying proxysql-admin.cnf file with command line proxysql user credentials if you dont use --config-file option.
  if [ -z "${config_file}" ]; then 
    sed -i "s|[ \t]*PROXYSQL_USERNAME[ \t]*=.*$| PROXYSQL_USERNAME=\"${PROXYSQL_USERNAME}\"|" /etc/proxysql-admin.cnf
    sed -i "s|[ \t]*PROXYSQL_PASSWORD[ \t]*=.*$| PROXYSQL_PASSWORD=\"${PROXYSQL_PASSWORD}\"|" /etc/proxysql-admin.cnf
    sed -i "s|[ \t]*PROXYSQL_HOSTNAME[ \t]*=.*$| PROXYSQL_HOSTNAME=\"${PROXYSQL_HOSTNAME}\"|" /etc/proxysql-admin.cnf
    sed -i "s|[ \t]*PROXYSQL_PORT[ \t]*=.*$| PROXYSQL_PORT=\"${PROXYSQL_PORT}\"|" /etc/proxysql-admin.cnf
  fi

  cluster_connection_check

  CLUSTER_NETWORK=$(mysql_exec "show status like 'wsrep_incoming_addresses'" | awk '{print $2}' | cut -d'.' -f1)
  if [[ "$CLUSTER_NETWORK" =~ ^[0-9]+$ ]]; then 
    USER_HOST_RANGE="$CLUSTER_NETWORK.%"
  else
    USER_HOST_RANGE="%"
  fi
  echo -e "\nConfiguring ProxySQL monitoring user.."
  user_input_check MONITOR "ProxySQL monitor user"

  check_user=`mysql_exec "SELECT user,host FROM mysql.user where user='$MONITOR_USERNAME' and host='$USER_HOST_RANGE';"`
  if [[ -z "$check_user" ]]; then
    mysql_exec "CREATE USER $MONITOR_USERNAME@'$USER_HOST_RANGE' IDENTIFIED BY '$MONITOR_PASSWORD';"
    check_cmd $?  "Cannot create the ProxySQL monitoring user"
    proxysql_exec "update global_variables set variable_value='$MONITOR_USERNAME' where variable_name='mysql-monitor_username'; update global_variables set variable_value='$MONITOR_PASSWORD' where variable_name='mysql-monitor_password'; "
    check_cmd $?  "Cannot set the mysql-monitor variables in ProxySQL"
    proxysql_exec "LOAD MYSQL VARIABLES TO RUNTIME;SAVE MYSQL VARIABLES TO DISK;"
    echo -e "\n\nUser '${BD}$MONITOR_USERNAME'@'$USER_HOST_RANGE${NBD}' has been added with USAGE privilege\n"
  else
    echo -e "\n"
    read -p "Monitoring user is already present in Cluster. Would you like to proceed with existing username and password [y/n] ? " check_param
    case $check_param in
      y|Y)
        read -r -s -p  "Please enter the password you have assigned to monitoring user '$MONITOR_USERNAME': " MONITOR_PASSWORD
        proxysql_exec "update global_variables set variable_value='$MONITOR_USERNAME' where variable_name='mysql-monitor_username'; update global_variables set variable_value='$MONITOR_PASSWORD' where variable_name='mysql-monitor_password'; "
        check_cmd $?  "Cannot set the mysql-monitor variables in ProxySQL"
        proxysql_exec "LOAD MYSQL VARIABLES TO RUNTIME;SAVE MYSQL VARIABLES TO DISK;"
      ;;
      n|N)
        proxysql_exec "update global_variables set variable_value='$MONITOR_USERNAME' where variable_name='mysql-monitor_username'; update global_variables set variable_value='$MONITOR_PASSWORD' where variable_name='mysql-monitor_password'; "
        check_cmd $?  "Cannot set the mysql-monitor variables in ProxySQL"
        proxysql_exec "LOAD MYSQL VARIABLES TO RUNTIME;SAVE MYSQL VARIABLES TO DISK;"
        echo -e "\n\nUser '${BD}$MONITOR_USERNAME'@'$USER_HOST_RANGE${NBD}' has been updated in ProxySQL database. Please make sure the credentials are same in Cluster\n"
      ;;
      *)
        echo "Please type [y/n]! Terminating.."
        exit 1
      ;;
    esac
  fi

  echo -e "\nConfiguring Cluster application user to connect through ProxySQL"
  user_input_check CLUSTER_APP "Cluster application user" $WRITE_HOSTGROUP_ID

  # Adding Cluster nodes to ProxySQL
  echo -e "\nAdding the Cluster server nodes to ProxySQL"
  if [ $MODE == "loadbal" ]; then
    proxysql_exec "DELETE FROM mysql_servers WHERE hostgroup_id=$WRITE_HOSTGROUP_ID"
    wsrep_address=(`mysql_exec "show status like 'wsrep_incoming_addresses'" | awk '{print $2}' | sed 's|,| |g'`)
    for i in "${wsrep_address[@]}"; do	
      ws_ip=$(echo $i | cut -d':' -f1)
      ws_port=$(echo $i | cut -d':' -f2)
      proxysql_exec "INSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,comment) VALUES ('$ws_ip',$WRITE_HOSTGROUP_ID,$ws_port,1000,'READWRITE');"
      check_cmd $? "Failed to add the Cluster server node $ws_ip:$ws_port"
    done
    proxysql_exec "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;"

  elif [ $MODE == "singlewrite" ]; then
    proxysql_exec "DELETE FROM mysql_servers WHERE hostgroup_id in ($WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID)"
    proxysql_exec "DELETE FROM mysql_query_rules WHERE destination_hostgroup in ($WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID)"
    if [ -z $WRITE_NODE ]; then
      read -r -p  "You have not given writer node info through command line/config-file. Please enter writer-node info (eg : 127.0.0.1:3306): " WRITE_NODE
      writer_ws_ip=$(echo $WRITE_NODE | cut -d':' -f1)
      writer_ws_port=$(echo $WRITE_NODE | cut -d':' -f2)
      printf "[client]\nuser=${CLUSTER_USERNAME}\npassword=${CLUSTER_PASSWORD}\nhost=${writer_ws_ip}\nport=${writer_ws_port}\n" | mysql --defaults-file=/dev/stdin --protocol=tcp -Bse "select @@port" >/dev/null 2>/dev/null
      if [ $? -ne 0 ]; then 
        echo -e "\nERROR: Could not establish connection to write node $writer_ws_ip:$writer_ws_port. Terminating!\n"; 
        proxysql_exec "DELETE FROM mysql_users WHERE default_hostgroup in ($WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID);"
        check_cmd $? "Cannot delete Cluster users from ProxySQL"
        exit 1
      fi
    else
      writer_ws_ip=$(echo $WRITE_NODE | cut -d':' -f1)
      writer_ws_port=$(echo $WRITE_NODE | cut -d':' -f2)
      printf "[client]\nuser=${CLUSTER_USERNAME}\npassword=${CLUSTER_PASSWORD}\nhost=${writer_ws_ip}\nport=${writer_ws_port}\n" | mysql --defaults-file=/dev/stdin --protocol=tcp -Bse "select @@port" >/dev/null 2>/dev/null
      if [ $? -ne 0 ]; then 
        echo -e "\nERROR: Could not establish connection to write node $writer_ws_ip:$writer_ws_port. Terminating!\n"; 
        proxysql_exec "DELETE FROM mysql_users WHERE default_hostgroup in ($WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID);"
        check_cmd $? "Cannot delete Cluster users from ProxySQL"
        exit 1
      fi
    fi

    proxysql_exec "DELETE FROM mysql_servers WHERE hostgroup_id=$WRITE_HOSTGROUP_ID"
    wsrep_address=(`mysql_exec "show status like 'wsrep_incoming_addresses'" | awk '{print $2}' | sed 's|,| |g'`)
    for i in "${wsrep_address[@]}"; do	
      ws_ip=$(echo $i | cut -d':' -f1)
      ws_port=$(echo $i | cut -d':' -f2)
      if [ "$ws_ip" == "$writer_ws_ip" -a "$ws_port" == "$writer_ws_port" ]; then
        proxysql_exec "INSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,comment) VALUES ('$writer_ws_ip',$WRITE_HOSTGROUP_ID,$writer_ws_port,1000000,'WRITE');"
        check_cmd $? "Failed to add the Cluster server node $writer_ws_ip:$writer_ws_port"
      else
        proxysql_exec "INSERT INTO mysql_servers (hostname,hostgroup_id,port,weight,comment) VALUES ('$ws_ip',$READ_HOSTGROUP_ID,$ws_port,1000,'READ');"
        check_cmd $? "Failed to add the Cluster server node $ws_ip:$ws_port"
      fi
    done
    proxysql_exec "INSERT INTO mysql_query_rules (username,destination_hostgroup,active,match_digest,apply) values('$CLUSTER_APP_USERNAME',$WRITE_HOSTGROUP_ID,1,'^SELECT.*FOR UPDATE',1),('$CLUSTER_APP_USERNAME',$READ_HOSTGROUP_ID,1,'^SELECT ',1);"
    check_cmd $? "Failed to add the read query rule"
    proxysql_exec "LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;LOAD MYSQL QUERY RULES TO RUNTIME;SAVE MYSQL QUERY RULES TO DISK;"
  fi

  # Adding Cluster monitoring scripts
  # Adding proxysql galera check scheduler
  proxysql_exec "DELETE FROM SCHEDULER WHERE ID=10;"
  check_cmd $?
  proxysql_exec "INSERT  INTO SCHEDULER (id,active,interval_ms,filename,arg1,arg2,arg3,arg4,arg5) VALUES (10,1,$GALERA_CHECK_INTERVAL,'$PROXYSQL_GALERA_CHECK',$WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID,${#wsrep_address[@]},1,'/var/lib/proxysql/proxysql_galera_check.log');"
  check_cmd $? "Failed to add the Cluster monitoring scheduler in ProxySQL"

  # Adding Cluster membership checking scheduler
  proxysql_exec "DELETE FROM SCHEDULER WHERE ID=11;"
  check_cmd $?
  proxysql_exec "INSERT  INTO SCHEDULER (id,active,interval_ms,filename,arg1,arg2,arg3) VALUES (11,1,5000,'$PROXYSQL_NODE_MONITOR',$WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID,'/var/lib/proxysql/proxysql_node_monitor.log');"
  check_cmd $? "Failed to add the Cluster membership checking scheduler in ProxySQL"

  proxysql_exec "LOAD SCHEDULER TO RUNTIME;SAVE SCHEDULER TO DISK;"
}

# Removing cluster configuration from proxysql
disable_proxysql(){
  proxysql_connection_check
  proxysql_exec "DELETE FROM mysql_users WHERE default_hostgroup in ($WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID);"
  check_cmd $? "Cannot delete Cluster users from ProxySQL"
  proxysql_exec "DELETE FROM mysql_servers WHERE hostgroup_id in ($WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID);"
  check_cmd $? "Cannot delete Cluster nodes from ProxySQL"
  proxysql_exec "DELETE FROM SCHEDULER WHERE ID IN (10,11);"
  check_cmd $? "Cannot delete Galera checker and node monitoring scheduler from ProxySQL"
  proxysql_exec "DELETE FROM mysql_query_rules WHERE destination_hostgroup in ($WRITE_HOSTGROUP_ID,$READ_HOSTGROUP_ID)"
  check_cmd $? "Cannot delete query rules from ProxySQL"
  proxysql_exec "LOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS TO DISK;LOAD SCHEDULER TO RUNTIME;SAVE SCHEDULER TO DISK;LOAD MYSQL SERVERS TO RUNTIME; SAVE MYSQL SERVERS TO DISK;LOAD MYSQL QUERY RULES TO RUNTIME;SAVE MYSQL QUERY RULES TO DISK;"

}

adduser(){
  proxysql_connection_check
  cluster_connection_check
  echo -e "\nAdding Cluster application user to ProxySQL database"
  echo -n "Enter Cluster application user name: "
  read -r CLUSTER_APP_WRITE_USERNAME
  while [[ -z "$CLUSTER_APP_WRITE_USERNAME" ]]
  do
    echo -n "No input entered, Enter Cluster application user name: "
    read -r CLUSTER_APP_WRITE_USERNAME
  done
  read -r -s -p  "Enter Cluster application user password: " CLUSTER_APP_WRITE_PASSWORD
  while [[ -z "$CLUSTER_APP_WRITE_PASSWORD" ]]
  do
    read -r -s -p  "No input entered, Enter Cluster application user password: " CLUSTER_APP_WRITE_PASSWORD
  done

  check_user=`proxysql_exec "SELECT username FROM mysql_users where username='$CLUSTER_APP_WRITE_USERNAME'"`
  if [[ -z "$check_user" ]]; then
    check_cluster_user=`mysql_exec "SELECT user,host FROM mysql.user where user='$CLUSTER_APP_WRITE_USERNAME'"`
    if [[ -z "$check_cluster_user" ]]; then
      echo -e "\n\n"
      read -p "Application user '$CLUSTER_APP_WRITE_USERNAME' does not exist in Cluster. Would you like to proceed [y/n] ? " check_param
      case $check_param in
        y|Y)
          proxysql_exec "INSERT INTO mysql_users (username,password,active,default_hostgroup) values ('$CLUSTER_APP_WRITE_USERNAME','$CLUSTER_APP_WRITE_PASSWORD',1,$WRITE_HOSTGROUP_ID);LOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS FROM RUNTIME;SAVE MYSQL USERS TO DISK;"
          check_cmd $? "Cannot add Cluster application user : '$CLUSTER_APP_WRITE_USERNAME' to ProxySQL database"
        ;;
        n|N)
          exit 1
        ;;
        *)
          echo "Please type [y/n]! Terminating.."
          exit 1
        ;;
      esac
    else
      proxysql_exec "INSERT INTO mysql_users (username,password,active,default_hostgroup) values ('$CLUSTER_APP_WRITE_USERNAME','$CLUSTER_APP_WRITE_PASSWORD',1,$WRITE_HOSTGROUP_ID);LOAD MYSQL USERS TO RUNTIME;SAVE MYSQL USERS FROM RUNTIME;SAVE MYSQL USERS TO DISK;"
      check_cmd $? "Cannot add Cluster application user : '$CLUSTER_APP_WRITE_USERNAME' to ProxySQL database"
    fi
  else
    echo -e "\nERROR: Application user '$CLUSTER_APP_WRITE_USERNAME' already exist in ProxySQL database. Terminating.."
    exit 1
  fi
}

if [ "$enable" == 1 -o "$disable" == 1 -o "$adduser" == 1 ]; then
  if [ "$enable" == 1 ];then
    echo -e "ProxySQL read/write configuration mode is ${BD}$MODE${NBD}\n"
    enable_proxysql
    echo -e "\nProxySQL configuration completed!\n"
    PROXYSQL_CLIENT_PORT=`proxysql_exec "SELECT * FROM runtime_global_variables WHERE variable_name='mysql-interfaces'" | awk '{print $2}' | grep -o -P '(?<=:).*(?=;)'`
    echo -e "ProxySQL has been successfully configured to use with Cluster\n"
    echo -e "You can use following login credentials to connect your application through ProxySQL\n"
    if [ -z "$DUMMY_TEST" ]; then
      echo -e "${BD}mysql --user=$CLUSTER_APP_USERNAME --password=xxxxx  --host=$PROXYSQL_HOSTNAME --port=$PROXYSQL_CLIENT_PORT --protocol=tcp ${NBD}\n"
    else
      echo -e "${BD}mysql --user=$CLUSTER_APP_USERNAME --password=$CLUSTER_APP_PASSWORD  --host=$PROXYSQL_HOSTNAME --port=$PROXYSQL_CLIENT_PORT --protocol=tcp ${NBD}\n"
    fi 
  fi
  if [ "$disable" == 1 ];then  
    disable_proxysql
    echo "ProxySQL configuration removed!"
  fi
  if [ "$adduser" == 1 ];then  
    adduser
    echo -e "\nAdded Cluster application user to ProxySQL database!"
  fi
else
  echo "Usage: proxysql-admin <user credentials> {enable|disable}"
  usage
fi


